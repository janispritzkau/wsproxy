#!/usr/bin/env node
const { version } = require("../package.json")
const fs = require("fs")

const help = `wsproxy v${version}\n
Usage:
  - wsproxy server --port 8080
  - wsproxy server --ssl --cert localhost.crt --key localhost.key
  - wsproxy client ws://localhost:8080 -p 9696
  - wsproxy client wss://domain.com

wsproxy client <websocket-url> [options]
  --port, -p            Local port [9696]
  --default-addr, -d    Default address
wsproxy server [options]
  --port, -p            Port to listen on [80 / 443]
  --host, -h            Address to use [0.0.0.0]
  --ssl                 Use https
  --cert, -c            SSL certificate [cert.pem]
  --key, -k             SLL private key [key.pem]
`

const showHelp = () => (console.log(help), process.exit(1))
const args = process.argv.slice(3), command = process.argv[2]

switch (command) {
    case "server": {
        const [ config ] = parseArgs(args, { port: "p", cert: "c", key: "k" })
        const runServer = require("../lib/server").default
        const port = config.port || (config.ssl ? 443 : 80)

        runServer(port, config.host, config.ssl && {
            cert: fs.readFileSync(config.cert || "cert.pem"),
            key: fs.readFileSync(config.key || "key.pem")
        })
        break
    }
    case "client": {
        const [ config, [ address ] ] = parseArgs(args, { port: "p", "default-addr": "d" })
        if (!address) showHelp()
        const runClient = require("../lib/client").default

        runClient(address, config.port || 9696, config["default-addr"])
        break
    }
    default: console.log(help)
}

function parseArgs(args, aliases = {}) {
    const opts = {}, rest = []
    let opt = null
    for (let arg of args) if (arg.startsWith("-") && arg.length >= 2) {
        if (opt) opts[opt] = true
        opt = arg.startsWith("--") ? arg.slice(2) : arg[1]
    } else if (opt) opts[opt] = arg, opt = null
    else rest.push(arg)
    if (opt) opts[opt] = true
    const config = {}
    a: for (let [opt, val] of Object.entries(opts)) {
        for (let [k, v] of Object.entries(aliases)) if (v.includes(opt)) {
            config[k] = val
            continue a
        }
        config[opt] = val
    }
    return [config, rest]
}
